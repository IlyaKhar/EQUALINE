// Preloader logic
window.addEventListener('load', () => {
  const preloader = document.getElementById('preloader');
  setTimeout(() => preloader.classList.add('hidden'), 700);
});

// Theme: init from saved preference or system, then handle toggle
(() => {
  const storageKey = 'equala_theme';
  const htmlEl = document.documentElement;
  const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
  const saved = localStorage.getItem(storageKey);
  const initial = saved || (prefersDark ? 'dark' : 'light');
  htmlEl.setAttribute('data-theme', initial);

  const toggleBtn = document.getElementById('themeToggle');
  const updateIcon = () => {
    if (!toggleBtn) return;
    const icon = toggleBtn.querySelector('.icon');
    if (icon) icon.textContent = htmlEl.getAttribute('data-theme') === 'dark' ? 'üåû' : 'üåô';
  };
  updateIcon();

  toggleBtn?.addEventListener('click', () => {
    const current = htmlEl.getAttribute('data-theme') === 'dark' ? 'dark' : 'light';
    const next = current === 'dark' ? 'light' : 'dark';
    htmlEl.setAttribute('data-theme', next);
    localStorage.setItem(storageKey, next);
    updateIcon();
  });
})();

// Authentication system with localStorage
class AuthSystem {
  constructor() {
    this.currentUser = this.getCurrentUser();
    this.updateAuthUI();
  }

  getCurrentUser() {
    const user = localStorage.getItem('equaline_user');
    return user ? JSON.parse(user) : null;
  }

  saveUser(user) {
    localStorage.setItem('equaline_user', JSON.stringify(user));
    this.currentUser = user;
    this.updateAuthUI();
  }

  logout() {
    localStorage.removeItem('equaline_user');
    this.currentUser = null;
    this.updateAuthUI();
  }

  updateAuthUI() {
    const authLinks = document.querySelector('.auth-links');
    if (!authLinks) return;

    if (this.currentUser) {
      authLinks.innerHTML = `
        <div class="user-info">
          <span>–ü—Ä–∏–≤–µ—Ç, ${this.currentUser.name}!</span>
          <button class="logout-btn" onclick="authSystem.logout()">–í—ã–π—Ç–∏</button>
        </div>
      `;
    } else {
      authLinks.innerHTML = `
        <button data-open-modal="login">–í—Ö–æ–¥</button>
        <button data-open-modal="register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
      `;
      // Re-attach event listeners
      document.querySelectorAll('[data-open-modal]').forEach(btn => {
        btn.addEventListener('click', () => openModal(btn.getAttribute('data-open-modal')));
      });
    }
  }

  validateEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }

  validatePassword(password) {
    return password.length >= 6;
  }

  validateName(name) {
    return name.trim().length >= 2;
  }

  validatePhone(phone) {
    // Remove all non-digit characters
    const cleaned = phone.replace(/\D/g, '');
    // Check if we have 10 or 11 digits (with or without country code)
    return cleaned.length >= 10 && cleaned.length <= 11;
  }
}

// Normalize phone number to standard format
function normalizePhone(phone) {
  if (!phone) return '';
  
  // Remove all non-digit characters
  let cleaned = phone.replace(/\D/g, '');
  
  // If starts with 8, replace with 7
  if (cleaned.startsWith('8')) {
    cleaned = '7' + cleaned.substring(1);
  }
  
  // If doesn't start with 7, add it
  if (!cleaned.startsWith('7')) {
    cleaned = '7' + cleaned;
  }
  
  // Ensure we have exactly 11 digits
  if (cleaned.length > 11) {
    cleaned = cleaned.substring(0, 11);
  }
  
  return cleaned;
}

const authSystem = new AuthSystem();

// Sidebar toggle
const sidebar = document.getElementById('sidebar');
const sidebarToggle = document.querySelector('.sidebar-toggle');
const sidebarClose = document.querySelector('.sidebar__close');
const toggleSidebar = (open) => {
  const willOpen = open ?? !sidebar.classList.contains('open');
  sidebar.classList.toggle('open', willOpen);
  sidebarToggle.setAttribute('aria-expanded', String(willOpen));
  document.body.style.overflow = willOpen ? 'hidden' : '';
};
sidebarToggle?.addEventListener('click', () => toggleSidebar());
sidebarClose?.addEventListener('click', () => toggleSidebar(false));

// Close sidebar by ESC or outside click
document.addEventListener('keydown', (e) => { if (e.key === 'Escape') toggleSidebar(false); });
document.addEventListener('click', (e) => {
  if (sidebar.classList.contains('open')) {
    if (!sidebar.contains(e.target) && !sidebarToggle.contains(e.target)) toggleSidebar(false);
  }
});

// Sidebar search (simple demo)
document.querySelector('.sidebar__search')?.addEventListener('submit', (e) => {
  e.preventDefault();
  const q = new FormData(e.currentTarget).get('');
  const input = e.currentTarget.querySelector('input');
  const query = (input?.value || '').trim();
  if (!query) return;
  window.location.href = `pages/catalog.html?search=${encodeURIComponent(query)}`;
});

// Scroll down button
document.querySelector('.scroll-down')?.addEventListener('click', () => {
  document.getElementById('info')?.scrollIntoView({ behavior: 'smooth' });
});

// Back to top
const toTop = document.getElementById('toTop');
window.addEventListener('scroll', () => {
  const show = window.scrollY > 400;
  toTop?.classList.toggle('show', show);
});
toTop?.addEventListener('click', () => window.scrollTo({ top: 0, behavior: 'smooth' }));

// Intersection animation for cards
const reveal = (els) => {
  const io = new IntersectionObserver((entries) => {
    for (const entry of entries) {
      if (entry.isIntersecting) {
        entry.target.animate([
          { transform: 'translateY(12px)', opacity: 0 },
          { transform: 'translateY(0)', opacity: 1 }
        ], { duration: 500, easing: 'ease', fill: 'both' });
        io.unobserve(entry.target);
      }
    }
  }, { threshold: 0.2 });
  els.forEach(el => io.observe(el));
};
reveal([...document.querySelectorAll('.card')]);

// Modal helpers
const openModal = (id) => {
  const m = document.getElementById(`modal-${id}`);
  if (!m) return;
  m.classList.add('open');
  document.body.style.overflow = 'hidden';
};
const closeModals = () => {
  document.querySelectorAll('.modal.open').forEach(m => m.classList.remove('open'));
  document.body.style.overflow = '';
};
document.querySelectorAll('[data-open-modal]').forEach(btn => {
  btn.addEventListener('click', () => openModal(btn.getAttribute('data-open-modal')));
});
document.querySelectorAll('[data-close-modal]').forEach(btn => btn.addEventListener('click', closeModals));
document.addEventListener('keydown', (e) => { if (e.key === 'Escape') closeModals(); });
document.querySelectorAll('.modal').forEach(m => m.addEventListener('click', (e) => { if (e.target === m) closeModals(); }));

// Forms: login, register, callback
const successModal = document.getElementById('modal-success');
const successTitle = document.getElementById('successTitle');
const successText = document.getElementById('successText');
const showSuccess = (title, text) => {
  successTitle.textContent = title;
  successText.textContent = text;
  successModal.classList.add('open');
};

const showError = (input, message) => {
  input.classList.add('error');
  let errorEl = input.parentNode.querySelector('.form-error');
  if (!errorEl) {
    errorEl = document.createElement('div');
    errorEl.className = 'form-error';
    input.parentNode.appendChild(errorEl);
  }
  errorEl.textContent = message;
};

const clearError = (input) => {
  input.classList.remove('error');
  const errorEl = input.parentNode.querySelector('.form-error');
  if (errorEl) errorEl.remove();
};

// Login form
const loginForm = document.getElementById('loginForm');
if (loginForm) {
  loginForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const email = formData.get('email').trim();
    const password = formData.get('password');
    
    let isValid = true;
    
    // Clear previous errors
    clearError(loginForm.querySelector('[name="email"]'));
    clearError(loginForm.querySelector('[name="password"]'));
    
    // Validate email
    if (!authSystem.validateEmail(email)) {
      showError(loginForm.querySelector('[name="email"]'), '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
      isValid = false;
    }
    
    // Validate password
    if (!authSystem.validatePassword(password)) {
      showError(loginForm.querySelector('[name="password"]'), '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      isValid = false;
    }
    
    if (isValid) {
      // Check if user exists in localStorage
      const users = JSON.parse(localStorage.getItem('equaline_users') || '[]');
      const user = users.find(u => u.email === email && u.password === password);
      
      if (user) {
        authSystem.saveUser({ name: user.name, email: user.email, phone: user.phone });
        closeModals();
        showSuccess('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}!`);
        loginForm.reset();
        // Dispatch auth success event
        document.dispatchEvent(new CustomEvent('authSuccess'));
      } else {
        showError(loginForm.querySelector('[name="email"]'), '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      }
    }
  });
}

// Register form
const registerForm = document.getElementById('registerForm');
if (registerForm) {
  registerForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const name = formData.get('name').trim();
    const email = formData.get('email').trim();
    const phone = formData.get('phone').trim();
    const password = formData.get('password');
    
    let isValid = true;
    
    // Clear previous errors
    clearError(registerForm.querySelector('[name="name"]'));
    clearError(registerForm.querySelector('[name="email"]'));
    clearError(registerForm.querySelector('[name="phone"]'));
    clearError(registerForm.querySelector('[name="password"]'));
    
    // Validate name
    if (!authSystem.validateName(name)) {
      showError(registerForm.querySelector('[name="name"]'), '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
      isValid = false;
    }
    
    // Validate email
    if (!authSystem.validateEmail(email)) {
      showError(registerForm.querySelector('[name="email"]'), '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
      isValid = false;
    }
    
    // Validate phone
    if (!authSystem.validatePhone(phone)) {
      showError(registerForm.querySelector('[name="phone"]'), '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      isValid = false;
    }
    
    // Validate password
    if (!authSystem.validatePassword(password)) {
      showError(registerForm.querySelector('[name="password"]'), '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      isValid = false;
    }
    
    if (isValid) {
      // Check if user already exists
      const users = JSON.parse(localStorage.getItem('equaline_users') || '[]');
      if (users.find(u => u.email === email)) {
        showError(registerForm.querySelector('[name="email"]'), '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        return;
      }
      
      // Save new user with normalized phone
      const normalizedPhone = normalizePhone(phone);
      const newUser = { name, email, phone: normalizedPhone, password };
      users.push(newUser);
      localStorage.setItem('equaline_users', JSON.stringify(users));
      
      authSystem.saveUser({ name, email, phone: normalizedPhone });
      closeModals();
      showSuccess('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}!`);
      registerForm.reset();
      // Dispatch auth success event
      document.dispatchEvent(new CustomEvent('authSuccess'));
    }
  });
}

// Callback form with validation
const callbackForm = document.getElementById('callbackForm');
if (callbackForm) {
  callbackForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const name = formData.get('name').trim();
    const phone = formData.get('phone').trim();
    const email = formData.get('email').trim();
    const message = formData.get('message').trim();
    
    let isValid = true;
    
    // Clear previous errors
    clearError(callbackForm.querySelector('[name="name"]'));
    clearError(callbackForm.querySelector('[name="phone"]'));
    clearError(callbackForm.querySelector('[name="email"]'));
    
    // Validate name
    if (!authSystem.validateName(name)) {
      showError(callbackForm.querySelector('[name="name"]'), '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
      isValid = false;
    }
    
    // Validate phone
    if (!authSystem.validatePhone(phone)) {
      showError(callbackForm.querySelector('[name="phone"]'), '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      isValid = false;
    }
    
    // Validate email if provided
    if (email && !authSystem.validateEmail(email)) {
      showError(callbackForm.querySelector('[name="email"]'), '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
      isValid = false;
    }
    
    if (isValid) {
      // Save callback request to localStorage
      const callbacks = JSON.parse(localStorage.getItem('equaline_callbacks') || '[]');
      callbacks.push({
        name, phone, email, message,
        timestamp: new Date().toISOString(),
        id: Date.now()
      });
      localStorage.setItem('equaline_callbacks', JSON.stringify(callbacks));
      
      showSuccess('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      callbackForm.reset();
    }
  });
}

// Reviews carousel functionality
const reviewsData = [
  {
    id: 1,
    name: '–ú–∞—Ç–≤–µ–π –ü–æ–∑–¥–µ–µ–≤',
    initials: '–ú–ü',
    date: '02 –ú–ê–Ø 2025',
    rating: 5,
    text: '–û—á–µ–Ω—å —É–¥–æ–±–Ω–æ, —á—Ç–æ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏, —Ç–∞–∫ –∫–∞–∫ –≤ –±—É–¥–Ω–∏ –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞—é. –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏ 3-4 —á–∞—Å–∞, –∑–∞–∫–∞–∑—ã–≤–∞—é —É—Ç—Ä–æ–º, –∞ –ø—Ä–∏–≤–æ–∑—è—Ç –≤ –æ–±–µ–¥. –¶–µ–Ω—É —Å—á–∏—Ç–∞—é –≤—ã–≥–æ–¥–Ω–æ–π.'
  },
  {
    id: 2,
    name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ü–æ–ø–æ–≤–∞',
    initials: '–ï–ü',
    date: '15 –ê–ü–†–ï–õ–Ø 2025',
    rating: 5,
    text: '–ü–æ—Å–ª–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å—ã–Ω–∞ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –±—É—Ç–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∏—Ç—å–µ–≤—É—é –≤–æ–¥—É. –ò–∑—É—á–∞–ª–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–ª–∞ —Ü–µ–Ω—ã. –ó–∞–∫–∞–∑–∞–ª–∏ –≤ ¬´–ü–µ–π –í–æ–¥—É –¥–ª—è –õ—è...¬ª –∏ –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –∫–∞—á–µ—Å—Ç–≤–æ–º.'
  },
  {
    id: 3,
    name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤',
    initials: '–ê–ò',
    date: '28 –ú–ê–†–¢–ê 2025',
    rating: 5,
    text: '–ó–∞–∫–∞–∑—ã–≤–∞—é –≤–æ–¥—É —É–∂–µ –ø–æ–ª–≥–æ–¥–∞. –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–ª–∏—á–Ω–æ–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è. –û—Å–æ–±–µ–Ω–Ω–æ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –æ–Ω–ª–∞–π–Ω –∏ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.'
  },
  {
    id: 4,
    name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
    initials: '–ú–ü',
    date: '10 –ú–ê–†–¢–ê 2025',
    rating: 5,
    text: '–í–æ–¥–∞ –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–∞—è –∏ —á–∏—Å—Ç–∞—è. –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏. –°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–æ–∑—è—Ç –≤–æ–≤—Ä–µ–º—è.'
  },
  {
    id: 5,
    name: '–î–º–∏—Ç—Ä–∏–π –°–æ–∫–æ–ª–æ–≤',
    initials: '–î–°',
    date: '22 –§–ï–í–†–ê–õ–Ø 2025',
    rating: 5,
    text: '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞-–∫–∞—á–µ—Å—Ç–≤–æ. –í–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ä–æ—à–∞—è, –ø—å–µ–º –≤—Å–µ–π —Å–µ–º—å–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º –∑–Ω–∞–∫–æ–º—ã–º.'
  },
  {
    id: 6,
    name: '–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
    initials: '–ê–ö',
    date: '05 –§–ï–í–†–ê–õ–Ø 2025',
    rating: 5,
    text: '–û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω–∞ —Å–µ—Ä–≤–∏—Å–æ–º. –í–æ–¥–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è. –û—Å–æ–±–µ–Ω–Ω–æ —É–¥–æ–±–Ω–æ, —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç.'
  },
  {
    id: 7,
    name: '–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
    initials: '–ï–í',
    date: '28 –Ø–ù–í–ê–†–Ø 2025',
    rating: 5,
    text: '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã! –ó–∞–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≥–æ–¥, –≤—Å–µ–≥–¥–∞ –¥–æ–≤–æ–ª—å–Ω—ã. –ö—É—Ä—å–µ—Ä—ã –≤–µ–∂–ª–∏–≤—ã–µ –∏ –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã–µ.'
  },
  {
    id: 8,
    name: '–°–µ—Ä–≥–µ–π –ú–æ—Ä–æ–∑–æ–≤',
    initials: '–°–ú',
    date: '15 –Ø–ù–í–ê–†–Ø 2025',
    rating: 4,
    text: '–•–æ—Ä–æ—à–∞—è –≤–æ–¥–∞ –ø–æ —Ä–∞–∑—É–º–Ω–æ–π —Ü–µ–Ω–µ. –ò–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç.'
  },
  {
    id: 9,
    name: '–¢–∞—Ç—å—è–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
    initials: '–¢–ù',
    date: '08 –Ø–ù–í–ê–†–Ø 2025',
    rating: 5,
    text: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –í–æ–¥–∞ –º—è–≥–∫–∞—è –∏ –≤–∫—É—Å–Ω–∞—è. –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –æ—Ñ–∏—Å–∞, –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –¥–æ–≤–æ–ª—å–Ω—ã.'
  },
  {
    id: 10,
    name: '–ê–Ω–¥—Ä–µ–π –õ–µ–±–µ–¥–µ–≤',
    initials: '–ê–õ',
    date: '02 –Ø–ù–í–ê–†–Ø 2025',
    rating: 5,
    text: '–ó–∞–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–¥—É —É–∂–µ –ø–æ–ª–≥–æ–¥–∞. –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º!'
  },
  {
    id: 11,
    name: '–ú–∞—Ä–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞',
    initials: '–ú–ö',
    date: '25 –î–ï–ö–ê–ë–†–Ø 2024',
    rating: 5,
    text: '–û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –≤–æ–¥—ã. –í–∫—É—Å–Ω–∞—è, —á–∏—Å—Ç–∞—è, –±–µ–∑ –ø—Ä–∏–≤–∫—É—Å–∞. –î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ.'
  },
  {
    id: 12,
    name: '–î–º–∏—Ç—Ä–∏–π –§–µ–¥–æ—Ä–æ–≤',
    initials: '–î–§',
    date: '18 –î–ï–ö–ê–ë–†–Ø 2024',
    rating: 4,
    text: '–ù–µ–ø–ª–æ—Ö–∞—è –≤–æ–¥–∞, —Ü–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤—É. –ò–Ω–æ–≥–¥–∞ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞, –Ω–æ –≤ —Ü–µ–ª–æ–º –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç.'
  },
  {
    id: 13,
    name: '–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
    initials: '–û–°',
    date: '10 –î–ï–ö–ê–ë–†–Ø 2024',
    rating: 5,
    text: '–û—Ç–ª–∏—á–Ω–∞—è –≤–æ–¥–∞! –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏. –û—Å–æ–±–µ–Ω–Ω–æ –Ω—Ä–∞–≤–∏—Ç—Å—è —É–¥–æ–±—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.'
  },
  {
    id: 14,
    name: '–ò–≥–æ—Ä—å –ü–æ–ø–æ–≤',
    initials: '–ò–ü',
    date: '05 –î–ï–ö–ê–ë–†–Ø 2024',
    rating: 5,
    text: '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –í–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å—Ç–∞—è –∏ –≤–∫—É—Å–Ω–∞—è. –°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.'
  },
  {
    id: 15,
    name: '–ù–∞—Ç–∞–ª—å—è –í–∞—Å–∏–ª—å–µ–≤–∞',
    initials: '–ù–í',
    date: '28 –ù–û–Ø–ë–†–Ø 2024',
    rating: 4,
    text: '–•–æ—Ä–æ—à–∞—è –≤–æ–¥–∞, –ø—Ä–∏—è—Ç–Ω—ã–π –≤–∫—É—Å. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ - –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–µ–µ.'
  }
];

let currentReviewIndex = 0;
const reviewsPerPage = 2;

const renderReviews = () => {
  const reviewsCards = document.querySelector('.reviews-cards');
  if (!reviewsCards) {
    return;
  }
  
  // Check if reviews are already in HTML
  const existingReviews = reviewsCards.querySelectorAll('.review-card');
  if (existingReviews.length > 0) {
    return;
  }
  
  // Add fade out effect
  reviewsCards.style.opacity = '0';
  reviewsCards.style.transform = 'translateY(20px)';
  
  setTimeout(() => {
    const startIndex = currentReviewIndex;
    const endIndex = Math.min(startIndex + reviewsPerPage, reviewsData.length);
    const currentReviews = reviewsData.slice(startIndex, endIndex);
    
    
    
    reviewsCards.innerHTML = currentReviews.map((review, index) => `
      <div class="review-card" style="animation-delay: ${index * 0.1}s">
        <div class="review-header">
          <div class="review-avatar">
            <div class="avatar-circle">${review.initials}</div>
          </div>
          <div class="review-info">
            <div class="review-date">${review.date}</div>
            <div class="review-name">${review.name}</div>
          </div>
        </div>
        <div class="review-rating">
          <span class="stars">${'‚òÖ'.repeat(review.rating)}</span>
        </div>
        <div class="review-text">
          <div class="quote-icon">"</div>
          <p>${review.text}</p>
        </div>
      </div>
    `).join('');
    
    // Add fade in effect
    reviewsCards.style.opacity = '1';
    reviewsCards.style.transform = 'translateY(0)';
  }, 150);
};

// Navigation functionality
document.addEventListener('DOMContentLoaded', () => {
  const navPrev = document.querySelector('.nav-prev');
  const navNext = document.querySelector('.nav-next');
  const navDots = document.querySelectorAll('.dot');
  
  // Previous button
  if (navPrev) {
    navPrev.addEventListener('click', () => {
      if (currentReviewIndex > 0) {
        currentReviewIndex -= reviewsPerPage;
        renderReviews();
        updateNavigation();
      }
    });
  }
  
  // Next button
  if (navNext) {
    navNext.addEventListener('click', () => {
      if (currentReviewIndex + reviewsPerPage < reviewsData.length) {
        currentReviewIndex += reviewsPerPage;
        renderReviews();
        updateNavigation();
      }
    });
  }
  
  // Dot navigation
  navDots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      currentReviewIndex = index * reviewsPerPage;
      renderReviews();
      updateNavigation();
    });
  });
  
  // Initialize reviews and navigation
  renderReviews();
  updateNavigation();
  
  // Leave review functionality
  const leaveReviewLink = document.querySelector('.leave-review');
  if (leaveReviewLink) {
    leaveReviewLink.addEventListener('click', (e) => {
      e.preventDefault();
      openModal('leave-review');
    });
  }
  
  // All reviews functionality
  const allReviewsLink = document.querySelector('.all-reviews');
  if (allReviewsLink) {
    allReviewsLink.addEventListener('click', (e) => {
      e.preventDefault();
      openAllReviewsModal();
    });
  }
  
  // Handle data-open-modal="all-reviews" buttons
  const allReviewsButtons = document.querySelectorAll('[data-open-modal="all-reviews"]');
  allReviewsButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      openAllReviewsModal();
    });
  });
});

// Update navigation state
const updateNavigation = () => {
  const navPrev = document.querySelector('.nav-prev');
  const navNext = document.querySelector('.nav-next');
  const navDots = document.querySelectorAll('.dot');
  const totalPages = Math.ceil(reviewsData.length / reviewsPerPage);
  const currentPage = Math.floor(currentReviewIndex / reviewsPerPage);
  
  
  // Update arrow buttons
  if (navPrev) {
    navPrev.disabled = currentReviewIndex === 0;
  }
  if (navNext) {
    navNext.disabled = currentReviewIndex + reviewsPerPage >= reviewsData.length;
  }
  
  // Update dots
  navDots.forEach((dot, index) => {
    dot.classList.toggle('active', index === currentPage);
    dot.style.display = index < totalPages ? 'block' : 'none';
  });
};


// Leave review form
const leaveReviewForm = document.getElementById('leaveReviewForm');
if (leaveReviewForm) {
  leaveReviewForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const name = formData.get('name').trim();
    const rating = parseInt(formData.get('rating'));
    const text = formData.get('text').trim();
    
    let isValid = true;
    
    // Clear previous errors
    clearError(leaveReviewForm.querySelector('[name="name"]'));
    clearError(leaveReviewForm.querySelector('[name="text"]'));
    
    // Validate name
    if (!authSystem.validateName(name)) {
      showError(leaveReviewForm.querySelector('[name="name"]'), '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
      isValid = false;
    }
    
    // Validate text
    if (text.length < 10) {
      showError(leaveReviewForm.querySelector('[name="text"]'), '–û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
      isValid = false;
    }
    
    if (isValid) {
      // Add new review to data
      const newReview = {
        id: reviewsData.length + 1,
        name: name,
        initials: name.split(' ').map(n => n[0]).join('').toUpperCase(),
        date: new Date().toLocaleDateString('ru-RU', { 
          day: '2-digit', 
          month: 'long', 
          year: 'numeric' 
        }).toUpperCase(),
        rating: rating,
        text: text
      };
      
      reviewsData.unshift(newReview); // Add to beginning
      currentReviewIndex = 0; // Reset to first page
      renderReviews();
      
      closeModals();
      showSuccess('–û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω', '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.');
      leaveReviewForm.reset();
    }
  });
}

// FAQ Accordion functionality
document.addEventListener('DOMContentLoaded', () => {
  const faqItems = document.querySelectorAll('.faq-item');
  
  faqItems.forEach(item => {
    const question = item.querySelector('.faq-question');
    const toggle = item.querySelector('.faq-toggle');
    
    question.addEventListener('click', () => {
      const isActive = item.classList.contains('active');
      
      // Close all other FAQ items
      faqItems.forEach(otherItem => {
        if (otherItem !== item) {
          otherItem.classList.remove('active');
        }
      });
      
      // Toggle current item
      if (isActive) {
        item.classList.remove('active');
      } else {
        item.classList.add('active');
      }
    });
    
    // Also handle click on toggle button
    toggle.addEventListener('click', (e) => {
      e.stopPropagation();
      question.click();
    });
  });
});

// Brand New Reviews System
class NewReviewsManager {
  constructor() {
    this.reviewsData = reviewsData; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤ –æ—Ç–∑—ã–≤–æ–≤
    
    this.currentPage = 0;
    this.reviewsPerPage = 2;
    this.totalPages = Math.ceil(this.reviewsData.length / this.reviewsPerPage);
    this.isAnimating = false;
    this.autoSlideInterval = null;
    
    this.reviewsList = document.getElementById('reviewsList');
    this.prevBtn = document.getElementById('prevBtnNew');
    this.nextBtn = document.getElementById('nextBtnNew');
    this.pageDots = document.getElementById('pageDots');
    
    this.init();
  }
  
  init() {
    if (!this.reviewsList) {
      console.log('Reviews list not found');
      return;
    }
    
    console.log('Initializing new reviews system');
    this.renderReviews();
    this.renderNavigation();
    this.bindEvents();
  }
  
  renderReviews() {
    if (!this.reviewsList) return;
    
    const startIndex = this.currentPage * this.reviewsPerPage;
    const endIndex = startIndex + this.reviewsPerPage;
    const currentReviews = this.reviewsData.slice(startIndex, endIndex);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    this.reviewsList.style.opacity = '0';
    this.reviewsList.style.transform = 'translateX(10px)';
    
    setTimeout(() => {
      this.reviewsList.innerHTML = currentReviews.map((review, index) => `
        <div class="review-item" style="animation-delay: ${index * 0.1}s">
          <div class="review-item-header">
            <div class="review-avatar">${review.initials}</div>
            <div class="review-item-info">
              <div class="review-item-date">${review.date}</div>
              <div class="review-item-name">${review.name}</div>
            </div>
          </div>
          <div class="review-item-rating">
            <span class="review-stars">${'‚òÖ'.repeat(review.rating)}</span>
          </div>
          <div class="review-item-text">
            <div class="review-quote">"</div>
            <p>${review.text}</p>
          </div>
        </div>
      `).join('');
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
      this.reviewsList.style.opacity = '1';
      this.reviewsList.style.transform = 'translateX(0)';
    }, 200);
  }
  
  renderNavigation() {
    if (!this.pageDots) return;
    
    this.pageDots.innerHTML = '';
    for (let i = 0; i < this.totalPages; i++) {
      const dot = document.createElement('span');
      dot.className = `page-dot ${i === this.currentPage ? 'active' : ''}`;
      dot.addEventListener('click', () => this.goToPage(i));
      this.pageDots.appendChild(dot);
    }
    
    this.updateButtons();
  }
  
  updateButtons() {
    if (this.prevBtn) {
      this.prevBtn.disabled = this.currentPage === 0;
    }
    if (this.nextBtn) {
      this.nextBtn.disabled = this.currentPage === this.totalPages - 1;
    }
  }
  
  goToPage(page) {
    if (page < 0 || page >= this.totalPages) return;
    this.currentPage = page;
    this.renderReviews();
    this.renderNavigation();
  }
  
  bindEvents() {
    if (this.prevBtn) {
      this.prevBtn.addEventListener('click', () => this.goToPage(this.currentPage - 1));
    }
    if (this.nextBtn) {
      this.nextBtn.addEventListener('click', () => this.goToPage(this.currentPage + 1));
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–∏—Å—Ç–∞–Ω–∏–µ
    this.startAutoSlide();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ª–∏—Å—Ç–∞–Ω–∏–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    if (this.reviewsList) {
      this.reviewsList.addEventListener('mouseenter', () => this.stopAutoSlide());
      this.reviewsList.addEventListener('mouseleave', () => this.startAutoSlide());
    }
  }
  
  startAutoSlide() {
    this.stopAutoSlide(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    this.autoSlideInterval = setInterval(() => {
      this.goToPage(this.currentPage + 1);
    }, 5000); // –õ–∏—Å—Ç–∞–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  }
  
  stopAutoSlide() {
    if (this.autoSlideInterval) {
      clearInterval(this.autoSlideInterval);
      this.autoSlideInterval = null;
    }
  }
}

// Initialize brand new reviews system
document.addEventListener('DOMContentLoaded', () => {
  new NewReviewsManager();
});

// Newsletter subscription form
const newsletterForm = document.getElementById('newsletterForm');
if (newsletterForm) {
  newsletterForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const email = formData.get('email').trim();
    
    let isValid = true;
    
    // Clear previous errors
    clearError(newsletterForm.querySelector('[name="email"]'));
    
    // Validate email
    if (!authSystem.validateEmail(email)) {
      showError(newsletterForm.querySelector('[name="email"]'), '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
      isValid = false;
    }
    
    if (isValid) {
      // Save newsletter subscription to localStorage
      const subscriptions = JSON.parse(localStorage.getItem('equaline_newsletter') || '[]');
      if (!subscriptions.find(sub => sub.email === email)) {
        subscriptions.push({
          email: email,
          timestamp: new Date().toISOString(),
          id: Date.now()
        });
        localStorage.setItem('equaline_newsletter', JSON.stringify(subscriptions));
        
        closeModals();
        showSuccess('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞', '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ú—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.');
        newsletterForm.reset();
      } else {
        showError(newsletterForm.querySelector('[name="email"]'), '–≠—Ç–æ—Ç email —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É');
      }
    }
  });
}

// All Reviews Modal functionality
const openAllReviewsModal = () => {
  console.log('Opening all reviews modal...');
  const modal = document.getElementById('modal-all-reviews');
  const allReviewsList = document.getElementById('allReviewsList');
  const totalReviewsEl = document.getElementById('totalReviews');
  const averageRatingEl = document.getElementById('averageRating');
  
  console.log('Modal:', modal);
  console.log('Reviews list:', allReviewsList);
  console.log('Total reviews element:', totalReviewsEl);
  console.log('Average rating element:', averageRatingEl);
  
  if (!modal || !allReviewsList) {
    console.error('Modal or reviews list not found!');
    return;
  }
  
  // Calculate statistics
  const totalReviews = 15; // –£ –Ω–∞—Å 15 –æ—Ç–∑—ã–≤–æ–≤
  const averageRating = 4.9; // –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
  
  // Update statistics
  console.log('Updating statistics...');
  if (totalReviewsEl) {
    totalReviewsEl.textContent = totalReviews;
    console.log('Updated total reviews to:', totalReviews);
  } else {
    console.error('Total reviews element not found!');
  }
  if (averageRatingEl) {
    averageRatingEl.textContent = averageRating;
    console.log('Updated average rating to:', averageRating);
  } else {
    console.error('Average rating element not found!');
  }
  
  // Render all reviews - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ 15 –æ—Ç–∑—ã–≤–æ–≤
  const allReviews = [
    { name: '–ú–∞—Ç–≤–µ–π –ü–æ–∑–¥–µ–µ–≤', initials: '–ú–ü', date: '02 –ú–ê–Ø 2022', rating: 5, text: '–û—á–µ–Ω—å —É–¥–æ–±–Ω–æ, —á—Ç–æ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏, —Ç–∞–∫ –∫–∞–∫ –≤ –±—É–¥–Ω–∏ –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞—é. –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏ 3-4 —á–∞—Å–∞, –∑–∞–∫–∞–∑—ã–≤–∞—é —É—Ç—Ä–æ–º, –∞ –ø—Ä–∏–≤–æ–∑—è—Ç –≤ –æ–±–µ–¥. –¶–µ–Ω—É —Å—á–∏—Ç–∞—é –≤—ã–≥–æ–¥–Ω–æ–π.' },
    { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ü–æ–ø–æ–≤–∞', initials: '–ï–ü', date: '15 –ê–ü–†–ï–õ–Ø 2022', rating: 5, text: '–ü–æ—Å–ª–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å—ã–Ω–∞ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –±—É—Ç–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∏—Ç—å–µ–≤—É—é –≤–æ–¥—É. –ò–∑—É—á–∞–ª–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–ª–∞ —Ü–µ–Ω—ã. –ó–∞–∫–∞–∑–∞–ª–∏ –≤ ¬´–ü–µ–π –í–æ–¥—É –¥–ª—è –õ—è...¬ª –∏ –æ—Å—Ç–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –∫–∞—á–µ—Å—Ç–≤–æ–º.' },
    { name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤', initials: '–ê–ò', date: '28 –ú–ê–†–¢–ê 2022', rating: 5, text: '–ó–∞–∫–∞–∑—ã–≤–∞—é –≤–æ–¥—É —É–∂–µ –ø–æ–ª–≥–æ–¥–∞. –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–ª–∏—á–Ω–æ–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è. –û—Å–æ–±–µ–Ω–Ω–æ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –æ–Ω–ª–∞–π–Ω –∏ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.' },
    { name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', initials: '–ú–ü', date: '10 –ú–ê–†–¢–ê 2022', rating: 5, text: '–í–æ–¥–∞ –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–∞—è –∏ —á–∏—Å—Ç–∞—è. –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏. –°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–æ–∑—è—Ç –≤–æ–≤—Ä–µ–º—è.' },
    { name: '–î–º–∏—Ç—Ä–∏–π –°–æ–∫–æ–ª–æ–≤', initials: '–î–°', date: '22 –§–ï–í–†–ê–õ–Ø 2022', rating: 5, text: '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞-–∫–∞—á–µ—Å—Ç–≤–æ. –í–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ä–æ—à–∞—è, –ø—å–µ–º –≤—Å–µ–π —Å–µ–º—å–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º –∑–Ω–∞–∫–æ–º—ã–º.' },
    { name: '–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞', initials: '–ê–ö', date: '05 –§–ï–í–†–ê–õ–Ø 2022', rating: 5, text: '–û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω–∞ —Å–µ—Ä–≤–∏—Å–æ–º. –í–æ–¥–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è. –û—Å–æ–±–µ–Ω–Ω–æ —É–¥–æ–±–Ω–æ, —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç.' },
    { name: '–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞', initials: '–ï–í', date: '28 –Ø–ù–í–ê–†–Ø 2022', rating: 5, text: '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã! –ó–∞–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≥–æ–¥, –≤—Å–µ–≥–¥–∞ –¥–æ–≤–æ–ª—å–Ω—ã. –ö—É—Ä—å–µ—Ä—ã –≤–µ–∂–ª–∏–≤—ã–µ –∏ –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã–µ.' },
    { name: '–°–µ—Ä–≥–µ–π –ú–æ—Ä–æ–∑–æ–≤', initials: '–°–ú', date: '15 –Ø–ù–í–ê–†–Ø 2022', rating: 4, text: '–•–æ—Ä–æ—à–∞—è –≤–æ–¥–∞ –ø–æ —Ä–∞–∑—É–º–Ω–æ–π —Ü–µ–Ω–µ. –ò–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç.' },
    { name: '–¢–∞—Ç—å—è–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞', initials: '–¢–ù', date: '08 –Ø–ù–í–ê–†–Ø 2022', rating: 5, text: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –í–æ–¥–∞ –º—è–≥–∫–∞—è –∏ –≤–∫—É—Å–Ω–∞—è. –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –æ—Ñ–∏—Å–∞, –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –¥–æ–≤–æ–ª—å–Ω—ã.' },
    { name: '–ê–Ω–¥—Ä–µ–π –õ–µ–±–µ–¥–µ–≤', initials: '–ê–õ', date: '02 –Ø–ù–í–ê–†–Ø 2022', rating: 5, text: '–ó–∞–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–¥—É —É–∂–µ –ø–æ–ª–≥–æ–¥–∞. –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º!' },
    { name: '–ú–∞—Ä–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞', initials: '–ú–ö', date: '25 –î–ï–ö–ê–ë–†–Ø 2021', rating: 5, text: '–û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –≤–æ–¥—ã. –í–∫—É—Å–Ω–∞—è, —á–∏—Å—Ç–∞—è, –±–µ–∑ –ø—Ä–∏–≤–∫—É—Å–∞. –î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ.' },
    { name: '–î–º–∏—Ç—Ä–∏–π –§–µ–¥–æ—Ä–æ–≤', initials: '–î–§', date: '18 –î–ï–ö–ê–ë–†–Ø 2021', rating: 4, text: '–ù–µ–ø–ª–æ—Ö–∞—è –≤–æ–¥–∞, —Ü–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤—É. –ò–Ω–æ–≥–¥–∞ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞, –Ω–æ –≤ —Ü–µ–ª–æ–º –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç.' },
    { name: '–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞', initials: '–û–°', date: '10 –î–ï–ö–ê–ë–†–Ø 2021', rating: 5, text: '–û—Ç–ª–∏—á–Ω–∞—è –≤–æ–¥–∞! –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏. –û—Å–æ–±–µ–Ω–Ω–æ –Ω—Ä–∞–≤–∏—Ç—Å—è —É–¥–æ–±—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.' },
    { name: '–ò–≥–æ—Ä—å –ü–æ–ø–æ–≤', initials: '–ò–ü', date: '05 –î–ï–ö–ê–ë–†–Ø 2021', rating: 5, text: '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! –í–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å—Ç–∞—è –∏ –≤–∫—É—Å–Ω–∞—è. –°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.' },
    { name: '–ù–∞—Ç–∞–ª—å—è –í–∞—Å–∏–ª—å–µ–≤–∞', initials: '–ù–í', date: '28 –ù–û–Ø–ë–†–Ø 2021', rating: 4, text: '–•–æ—Ä–æ—à–∞—è –≤–æ–¥–∞, –ø—Ä–∏—è—Ç–Ω—ã–π –≤–∫—É—Å. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ - –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–µ–µ.' }
  ];
  
  allReviewsList.innerHTML = allReviews.map((review, index) => `
    <div class="review-item-modal" style="animation-delay: ${index * 0.1}s">
      <div class="review-header">
        <div class="review-avatar">
          <div class="avatar-circle">${review.initials}</div>
        </div>
        <div class="review-info">
          <div class="review-date">${review.date}</div>
          <div class="review-name">${review.name}</div>
        </div>
      </div>
      <div class="review-rating">
        <span class="stars">${'‚òÖ'.repeat(review.rating)}</span>
      </div>
      <div class="review-text">
        <p>${review.text}</p>
      </div>
    </div>
  `).join('');
  
  // Open modal
  modal.classList.add('open');
  document.body.style.overflow = 'hidden';
  
  // Add smooth scroll to top of reviews list
  setTimeout(() => {
    allReviewsList.scrollTop = 0;
  }, 100);
};

// Stone to Water Animation System
class StoneWaterAnimation {
  constructor() {
    this.stoneImage = document.getElementById('stoneImage');
    this.waterImage = document.getElementById('waterImage');
    this.container = document.getElementById('productsImageContainer');
    this.stonePiecesContainer = document.getElementById('stonePiecesContainer');
    this.stonePieces = document.querySelectorAll('.stone-piece');
    this.isAnimating = false;
    
    console.log('StoneWaterAnimation –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å 6 –∫—É—Å–æ—á–∫–∞–º–∏ –∫–∞–º–Ω—è');
    console.log('stoneImage –Ω–∞–π–¥–µ–Ω:', !!this.stoneImage);
    console.log('waterImage –Ω–∞–π–¥–µ–Ω:', !!this.waterImage);
    console.log('stonePiecesContainer –Ω–∞–π–¥–µ–Ω:', !!this.stonePiecesContainer);
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–æ—á–∫–æ–≤:', this.stonePieces.length);
    
    if (this.stoneImage && this.stonePiecesContainer) {
      this.init();
    } else {
      console.error('–ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã!');
    }
  }

  init() {
    this.stoneImage.addEventListener('mouseenter', () => this.animateStoneToWater());
  }

  animateStoneToWater() {
    if (this.isAnimating) return;
    this.isAnimating = true;

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞—Å–∫–æ–ª–∞ –∫–∞–º–Ω—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ—â–∏–Ω—ã –Ω–∞ –∫–∞–º–Ω–µ
    this.stoneImage.classList.add('cracking');
    this.createDetailedCracks();
    
    // –ß–µ—Ä–µ–∑ 100–º—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Å–æ—á–∫–∏ –∫–∞–º–Ω—è
    setTimeout(() => {
      console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Å–æ—á–∫–∏ –∫–∞–º–Ω—è');
      this.showStonePieces();
    }, 100);
    
    // –ß–µ—Ä–µ–∑ 300–º—Å –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä—ã–≤–∞—Ç—å –∫–∞–º–µ–Ω—å –∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∫—É—Å–æ—á–∫–∏
    setTimeout(() => {
      console.log('–°–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ–Ω—å –∏ –∞–Ω–∏–º–∏—Ä—É–µ–º –∫—É—Å–æ—á–∫–∏');
      this.stoneImage.style.transition = 'opacity 0.3s ease-out';
      this.stoneImage.style.opacity = '0';
      this.animateStonePieces();
    }, 300);
    
    // –ß–µ—Ä–µ–∑ 400–º—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É—Ç—ã–ª–∫—É
    setTimeout(() => {
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –±—É—Ç—ã–ª–∫–∏');
      this.waterImage.classList.add('appearing');
    }, 200); // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—É—Ç—ã–ª–∫—É —á–µ—Ä–µ–∑ 200–º—Å (–≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ—â–∏–Ω)
    
    // –ß–µ—Ä–µ–∑ 2—Å —Å–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ–Ω—å –Ω–∞–≤—Å–µ–≥–¥–∞
    setTimeout(() => {
      this.stoneImage.style.display = 'none';
    }, 2000);
  }

  createDetailedCracks() {
    const rect = this.stoneImage.getBoundingClientRect();
    const centerX = rect.width / 2;
    const centerY = rect.height / 2;
    
    console.log('–°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—â–∏–Ω—ã –≤ –ø–æ–∑–∏—Ü–∏–∏:', centerX, centerY);
    console.log('–†–∞–∑–º–µ—Ä—ã –∫–∞–º–Ω—è:', rect.width, 'x', rect.height);
    console.log('–ü–æ–∑–∏—Ü–∏—è –∫–∞–º–Ω—è:', rect.left, rect.top);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç—Ä–µ—â–∏–Ω –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ Petroglyph
    const cracksContainer = document.createElement('div');
    cracksContainer.className = 'cracks-container';
    cracksContainer.style.position = 'absolute';
    cracksContainer.style.left = rect.left + 'px';
    cracksContainer.style.top = rect.top + 'px';
    cracksContainer.style.width = rect.width + 'px';
    cracksContainer.style.height = rect.height + 'px';
    cracksContainer.style.pointerEvents = 'none';
    cracksContainer.style.zIndex = '1000';
    // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    const crackInner = document.createElement('div');
    crackInner.className = 'crack-inner';
    crackInner.style.pointerEvents = 'auto';
    
    cracksContainer.appendChild(crackInner);
    document.body.appendChild(cracksContainer);
    
    console.log('–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç—Ä–µ—â–∏–Ω —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏:', rect.width, 'x', rect.height);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ—â–∏–Ω—ã - —Ä–æ–≤–Ω—ã–µ –∏ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ
    const mainCracks = [
      { angle: 0, length: 60, delay: 0 },           // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è
      { angle: Math.PI/2, length: 60, delay: 50 },  // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è
      { angle: Math.PI, length: 60, delay: 100 },   // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è)
      { angle: -Math.PI/2, length: 60, delay: 150 }, // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è)
      { angle: Math.PI/4, length: 50, delay: 200 },  // –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è
      { angle: -Math.PI/4, length: 50, delay: 250 }, // –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è)
      { angle: Math.PI/6, length: 45, delay: 300 },  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è
      { angle: -Math.PI/6, length: 45, delay: 350 }  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è
    ];
    
    mainCracks.forEach((crack, i) => {
      const crackElement = document.createElement('div');
      crackElement.className = 'crack-element main-crack';
      
      // –¢—Ä–µ—â–∏–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Ç–æ—á–Ω–æ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞
      const startX = centerX;
      const startY = centerY;
      
      crackElement.style.left = startX + 'px';
      crackElement.style.top = startY + 'px';
      crackElement.style.width = crack.length + 'px';
      crackElement.style.height = '5px';
      crackElement.style.background = '#000'; // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç
      crackElement.style.transform = `rotate(${crack.angle * 180 / Math.PI}deg)`;
      crackElement.style.pointerEvents = 'none';
      crackElement.style.opacity = '1'; // –°—Ä–∞–∑—É –≤–∏–¥–∏–º—ã–µ
      crackElement.style.border = '1px solid #000';
      
      crackInner.appendChild(crackElement);
      console.log(`–°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–µ—â–∏–Ω–∞ ${i} –≤ –ø–æ–∑–∏—Ü–∏–∏:`, startX, startY, '—Ä–∞–∑–º–µ—Ä:', crack.length);
      
      // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ—â–∏–Ω—ã
      setTimeout(() => {
        crackElement.style.transition = 'width 0.3s ease-out';
        crackElement.style.width = (crack.length + 20) + 'px';
        console.log(`–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ—â–∏–Ω—É ${i}`);
      }, crack.delay);
      
      // –£–¥–∞–ª—è–µ–º —Ç—Ä–µ—â–∏–Ω—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => {
        if (crackElement.parentNode) {
          crackElement.parentNode.removeChild(crackElement);
        }
      }, 1200);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–ª–∫–∏–µ —Ç—Ä–µ—â–∏–Ω—ã - –±–æ–ª–µ–µ —Ä–æ–≤–Ω—ã–µ
    const smallCrackAngles = [
      Math.PI/8, -Math.PI/8, Math.PI/3, -Math.PI/3, 
      Math.PI*2/3, -Math.PI*2/3, Math.PI*5/6, -Math.PI*5/6,
      Math.PI*7/8, -Math.PI*7/8
    ];
    
    for (let i = 0; i < 10; i++) {
      const smallCrack = document.createElement('div');
      smallCrack.className = 'crack-element small-crack';
      
      const angle = smallCrackAngles[i];
      const length = 25 + Math.random() * 15; // –ë–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è –¥–ª–∏–Ω–∞
      const startX = centerX + Math.cos(angle) * 20; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
      const startY = centerY + Math.sin(angle) * 20;
      
      smallCrack.style.left = startX + 'px';
      smallCrack.style.top = startY + 'px';
      smallCrack.style.width = length + 'px';
      smallCrack.style.height = '2px';
      smallCrack.style.background = '#444'; // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç
      smallCrack.style.transform = `rotate(${angle * 180 / Math.PI}deg)`;
      smallCrack.style.pointerEvents = 'none';
      smallCrack.style.opacity = '1'; // –°—Ä–∞–∑—É –≤–∏–¥–∏–º—ã–µ
      smallCrack.style.border = '1px solid #000';
      
      crackInner.appendChild(smallCrack);
      
      setTimeout(() => {
        smallCrack.style.transition = 'opacity 0.2s ease-out';
        smallCrack.style.opacity = '1';
      }, 180 + i * 20);
      
      setTimeout(() => {
        if (smallCrack.parentNode) {
          smallCrack.parentNode.removeChild(smallCrack);
        }
      }, 1000);
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—ã–ª–∏ –ø—Ä–∏ —Ä–∞—Å–∫–æ–ª–µ
    this.createDustEffect(rect.left + rect.width / 2, rect.top + rect.height / 2);
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      if (cracksContainer.parentNode) {
        cracksContainer.parentNode.removeChild(cracksContainer);
      }
    }, 1500);
  }

  createDustEffect(centerX, centerY) {
    // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –ø—ã–ª–∏
    for (let i = 0; i < 15; i++) {
      const dust = document.createElement('div');
      dust.style.position = 'fixed';
      dust.style.left = centerX + 'px';
      dust.style.top = centerY + 'px';
      dust.style.width = '2px';
      dust.style.height = '2px';
      dust.style.background = '#8B7355';
      dust.style.borderRadius = '50%';
      dust.style.pointerEvents = 'none';
      dust.style.zIndex = '1002';
      dust.style.opacity = '0.8';
      
      document.body.appendChild(dust);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–ª–µ—Ç–∞ –ø—ã–ª–∏
      const angle = Math.random() * Math.PI * 2;
      const distance = 20 + Math.random() * 40;
      const duration = 0.8 + Math.random() * 0.4;
      
      dust.style.transition = `all ${duration}s ease-out`;
      dust.style.transform = `translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px)`;
      dust.style.opacity = '0';
      
      // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—É –ø—ã–ª–∏
      setTimeout(() => {
        if (dust.parentNode) {
          dust.parentNode.removeChild(dust);
        }
      }, duration * 1000);
    }
  }

  showStonePieces() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫—É—Å–æ—á–∫–∞–º–∏
    this.stonePiecesContainer.classList.add('active');
    this.stonePiecesContainer.classList.add('unified');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫—É—Å–æ—á–µ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –µ–¥–∏–Ω–æ–≥–æ –∫–∞–º–Ω—è
    this.stonePieces.forEach((piece, index) => {
      piece.style.opacity = '1';
      piece.style.animation = 'pieceAppear 0.3s ease-out forwards';
    });
  }

  animateStonePieces() {
    // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –µ–¥–∏–Ω–æ–≥–æ –∫–∞–º–Ω—è
    this.stonePiecesContainer.classList.remove('unified');
    
    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–µ—Ç–∞–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—ã, –ø–æ—Ç–æ–º –ø–∞–¥–µ–Ω–∏–µ –≤–Ω–∏–∑
    const fallDirections = [
      { x: -60, y: 0 },   // 1 - –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π -> –≤–ª–µ–≤–æ, –ø–æ—Ç–æ–º –≤–Ω–∏–∑
      { x: 0, y: 0 },     // 2 - –≤–µ—Ä—Ö —Ü–µ–Ω—Ç—Ä -> –ø—Ä—è–º–æ –≤–Ω–∏–∑
      { x: 60, y: 0 },    // 3 - –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π -> –≤–ø—Ä–∞–≤–æ, –ø–æ—Ç–æ–º –≤–Ω–∏–∑
      { x: -50, y: 0 },   // 4 - –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π -> –≤–ª–µ–≤–æ, –ø–æ—Ç–æ–º –≤–Ω–∏–∑
      { x: 0, y: 0 },     // 5 - –Ω–∏–∂–Ω–∏–π —Ü–µ–Ω—Ç—Ä -> –ø—Ä—è–º–æ –≤–Ω–∏–∑
      { x: 50, y: 0 }     // 6 - –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π -> –≤–ø—Ä–∞–≤–æ, –ø–æ—Ç–æ–º –≤–Ω–∏–∑
    ];
    
    this.stonePieces.forEach((piece, index) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const direction = fallDirections[index] || fallDirections[0];
      const fallX = direction.x;
      const fallY = direction.y;
      const duration = 3.0; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
      piece.style.setProperty('--fall-x', fallX + 'px');
      piece.style.setProperty('--fall-y', fallY + 'px');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–∞–¥–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        piece.style.animation = `pieceFall ${duration}s linear forwards`;
      }, 50 + index * 100);
      
      // –£–¥–∞–ª—è–µ–º –∫—É—Å–æ—á–µ–∫ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => {
        if (piece.parentNode) {
          piece.parentNode.removeChild(piece);
        }
      }, (duration + 0.5) * 1000);
    });
  }

  createFallingPieces() {
    const rect = this.stoneImage.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    
    // –°–æ–∑–¥–∞–µ–º 12-15 –ø–∞–¥–∞—é—â–∏—Ö –∫—É—Å–æ—á–∫–æ–≤ –∫–∞–º–Ω—è
    const pieceCount = 12 + Math.floor(Math.random() * 4);
    
    for (let i = 0; i < pieceCount; i++) {
      const piece = document.createElement('div');
      piece.className = 'falling-piece';
      
      // –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫—É—Å–æ—á–∫–∞
      const size = 8 + Math.random() * 12;
      piece.style.width = size + 'px';
      piece.style.height = size + 'px';
      
      // –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ/–∫–æ—Ä–∏—á–Ω–µ–≤–æ–≥–æ –¥–ª—è –∫–∞–º–Ω—è
      const stoneColors = ['#8B7355', '#A68B5B', '#6B5B47', '#7A6B4F', '#9B8B6B', '#8A7A5A'];
      piece.style.background = stoneColors[Math.floor(Math.random() * stoneColors.length)];
      
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—É—Å–æ—á–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö –∫–∞–º–Ω—è
      const angle = (Math.PI * 2 * i) / pieceCount;
      const distance = 10 + Math.random() * 30;
      const startX = centerX + Math.cos(angle) * distance;
      const startY = centerY + Math.sin(angle) * distance;
      
      piece.style.position = 'fixed';
      piece.style.left = startX + 'px';
      piece.style.top = startY + 'px';
      piece.style.borderRadius = '2px';
      piece.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)';
      piece.style.pointerEvents = 'none';
      piece.style.zIndex = '1001';
      piece.style.opacity = '1';
      
      document.body.appendChild(piece);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è –∫—É—Å–æ—á–∫–∞
      const fallDistance = 100 + Math.random() * 150;
      const fallAngle = (Math.random() - 0.5) * Math.PI / 2; // –°–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –ø–∞–¥–µ–Ω–∏—è
      const fallX = Math.sin(fallAngle) * fallDistance;
      const fallY = Math.cos(fallAngle) * fallDistance + 50; // –í—Å–µ–≥–¥–∞ –Ω–µ–º–Ω–æ–≥–æ –≤–Ω–∏–∑
      const rotation = (Math.random() - 0.5) * 720; // –î–æ 2 –æ–±–æ—Ä–æ—Ç–æ–≤
      const duration = 1.2 + Math.random() * 0.6;
      
      piece.style.transition = `all ${duration}s ease-in`;
      piece.style.transform = `translate(${fallX}px, ${fallY}px) rotate(${rotation}deg)`;
      piece.style.opacity = '0';
      
      // –£–¥–∞–ª—è–µ–º –∫—É—Å–æ—á–µ–∫ –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è
      setTimeout(() => {
        if (piece.parentNode) {
          piece.parentNode.removeChild(piece);
        }
      }, duration * 1000);
    }
  }

  createStoneFragments() {
    const rect = this.stoneImage.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    
    // –°–æ–∑–¥–∞–µ–º —Ä–æ–≤–Ω–æ 8 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏
    const fragmentShapes = ['triangle', 'diamond', 'hexagon', 'irregular'];
    const fragmentSizes = [
      { width: 20, height: 25 },
      { width: 18, height: 22 },
      { width: 22, height: 18 },
      { width: 16, height: 20 },
      { width: 24, height: 16 },
      { width: 19, height: 24 },
      { width: 21, height: 19 },
      { width: 17, height: 23 }
    ];
    
    for (let i = 0; i < 8; i++) {
      const fragment = document.createElement('div');
      fragment.className = `stone-fragment ${fragmentShapes[i % fragmentShapes.length]}`;
      
      // –†–∞–∑–º–µ—Ä—ã —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
      const size = fragmentSizes[i];
      fragment.style.width = size.width + 'px';
      fragment.style.height = size.height + 'px';
      
      // –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ/–∫–æ—Ä–∏—á–Ω–µ–≤–æ–≥–æ –¥–ª—è –∫–∞–º–Ω—è
      const stoneColors = ['#8B7355', '#A68B5B', '#6B5B47', '#7A6B4F', '#9B8B6B', '#8A7A5A'];
      fragment.style.background = stoneColors[Math.floor(Math.random() * stoneColors.length)];
      
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä–µ (–∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ Petroglyph)
      fragment.style.left = centerX + 'px';
      fragment.style.top = centerY + 'px';
      
      // –ö–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ª–µ—Ç–∏—Ç –≤ —Å–≤–æ—é —Å—Ç–æ—Ä–æ–Ω—É —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ñ–∏–∑–∏–∫–æ–π
      const angle = (Math.PI * 2 * i) / 8 + (Math.random() - 0.5) * 0.5;
      const distance = 80 + Math.random() * 100;
      const fallX = Math.cos(angle) * distance;
      const fallY = Math.sin(angle) * distance + 60 + Math.random() * 40; // –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
      const rotation = (Math.random() - 0.5) * 1440; // –¥–æ 4 –æ–±–æ—Ä–æ—Ç–æ–≤
      
      fragment.style.setProperty('--fall-x', fallX + 'px');
      fragment.style.setProperty('--fall-y', fallY + 'px');
      fragment.style.setProperty('--rotation', rotation + 'deg');
      
      document.body.appendChild(fragment);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (–∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ Petroglyph)
      const delay = i * 20; // 20–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏
      
      setTimeout(() => {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–ª–µ—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        fragment.style.animation = `fragmentFall 1.5s ease-out forwards`;
      }, delay);
      
      // –£–¥–∞–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => {
        if (fragment.parentNode) {
          fragment.parentNode.removeChild(fragment);
        }
      }, 1500 + delay);
    }
  }

}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
// –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –ø—Ä–æ—Å—å–±–µ: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞–º–Ω—è –∏ –±—É—Ç—ã–ª–∫–∏
// document.addEventListener('DOMContentLoaded', () => {
//   new StoneWaterAnimation();
// });

// Enable drag within productsImageContainer for .stone-piece
document.addEventListener('DOMContentLoaded', () => {
  const container = document.getElementById('productsImageContainer');
  if (!container) return;
  const pieces = Array.from(container.querySelectorAll('.stone-piece'));
  const water = document.getElementById('waterImage');

  let active = null;
  let startX = 0, startY = 0;
  let startLeft = 0, startTop = 0;

  const getRect = () => container.getBoundingClientRect();
  const clamp = (v, min, max) => Math.min(Math.max(v, min), max);

  const storageKey = 'stone_piece_positions_v1';
  const readSaved = () => {
    try { return JSON.parse(localStorage.getItem(storageKey) || '{}'); } catch { return {}; }
  };
  const writeSaved = (obj) => {
    try { localStorage.setItem(storageKey, JSON.stringify(obj)); } catch {}
  };
  const getId = (el) => {
    const m = Array.from(el.classList).find(c => /^piece-\d+$/.test(c));
    return m || (el.getAttribute('src') || 'piece-' + pieces.indexOf(el));
  };
  let saved = readSaved();

  const onPointerDown = (e) => {
    const t = e.target.closest('.stone-piece');
    if (!t) return;
    active = t;
    active.setPointerCapture?.(e.pointerId);
    const rect = getRect();
    startX = e.clientX - rect.left;
    startY = e.clientY - rect.top;
    startLeft = parseFloat(active.style.left) || parseFloat(active.dataset.left) || 0;
    startTop = parseFloat(active.style.top) || parseFloat(active.dataset.top) || 0;
  };

  const onPointerMove = (e) => {
    if (!active) return;
    const rect = getRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    const dx = x - startX;
    const dy = y - startY;
    // —Ä–∞—Å—à–∏—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const left = clamp(startLeft + (dx / rect.width) * 100, -20, 120);
    const top = clamp(startTop + (dy / rect.height) * 100, -20, 120);
    active.style.left = left + '%';
    active.style.top = top + '%';
  };

  const onPointerUp = () => {
    if (!active) return;
    active.dataset.left = String(parseFloat(active.style.left) || 0);
    active.dataset.top = String(parseFloat(active.style.top) || 0);
    // persist to localStorage
    const id = getId(active);
    saved[id] = { left: active.dataset.left, top: active.dataset.top };
    writeSaved(saved);
    active = null;
  };

  // initialize saved dataset positions
  pieces.forEach(p => {
    const id = getId(p);
    const pos = saved[id];
    if (pos) {
      p.dataset.left = pos.left;
      p.dataset.top = pos.top;
    } else {
      // seed from computed CSS
      const computed = window.getComputedStyle(p);
      const rect = getRect();
      const leftPx = parseFloat(computed.left) || 0;
      const topPx = parseFloat(computed.top) || 0;
      const leftPct = (leftPx / (rect.width || 1)) * 100;
      const topPct = (topPx / (rect.height || 1)) * 100;
      p.dataset.left = String(leftPct);
      p.dataset.top = String(topPct);
    }
    // apply into style
    p.style.left = p.dataset.left + '%';
    p.style.top = p.dataset.top + '%';
  });

  container.addEventListener('pointerdown', onPointerDown);
  window.addEventListener('pointermove', onPointerMove);
  window.addEventListener('pointerup', onPointerUp);

  // Trigger explode animation by double-click/tap on –æ–±–ª–∞—Å—Ç—å
  const triggerExplode = () => {
    if (container.dataset.closed === '1') {
      // –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã—Ç–æ ‚Äî –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É—Ç—ã–ª–∫—É –∏ –Ω–µ –≤–∑—Ä—ã–≤–∞–µ–º
      container.classList.remove('bottle-visible', 'bottle-hiding', 'breaking', 'collecting');
      return;
    }
    // –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–µ—Ç–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const rect = container.getBoundingClientRect();
    const cx = rect.width / 2;
    const cy = rect.height / 2;
    pieces.forEach((p, i) => {
      const pr = p.getBoundingClientRect();
      const px = pr.left - rect.left + pr.width / 2;
      const py = pr.top - rect.top + pr.height / 2;
      const vx = (px - cx);
      const vy = (py - cy);
      const k = 1.6; // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞–∑–ª–µ—Ç–∞
      p.style.setProperty('--explode-x', vx * k + 'px');
      p.style.setProperty('--explode-y', vy * (k + 0.2) + 'px');
      p.style.setProperty('--rotation', ((i % 2 ? 1 : -1) * (5 + i*2)) + 'deg');
      p.style.setProperty('--dur', (2.5 + (i%5)*0.15) + 's');
    });
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ breaking –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
    container.classList.remove('breaking');
    // force reflow
    void container.offsetWidth;
    container.classList.add('breaking');
    // –ø–æ–∫–∞–∑–∞—Ç—å –±—É—Ç—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –Ω–∞–≤—Å–µ–≥–¥–∞
    if (container.dataset.closed !== '1') {
      container.classList.add('bottle-visible');
    }
  };

  // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —É–±–∏—Ä–∞–Ω–∏–∏ –º—ã—à–∏
  const resetAnimation = () => {
    container.classList.remove('breaking', 'bottle-visible');
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–±–æ—Ä–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    container.collectTimer = setTimeout(() => {
      if (!container.classList.contains('breaking')) {
        collectPieces();
      }
    }, 5000);
  };

  // –ê–Ω–∏–º–∞—Ü–∏—è —Å–±–æ—Ä–∞ –∫—É—Å–æ—á–∫–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ
  const collectPieces = () => {
    console.log('collectPieces called');
    container.classList.add('collecting');
    container.classList.remove('bottle-visible', 'bottle-hiding');
    
    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±–æ—Ä–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å
    setTimeout(() => {
      console.log('Collect animation finished');
      container.classList.remove('collecting');
      pieces.forEach(p => {
        p.style.animation = 'none';
        p.style.setProperty('--explode-x', '0px');
        p.style.setProperty('--explode-y', '0px');
        p.style.setProperty('--rotation', '0deg');
      });
      // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –±–æ–ª—å—à–µ –±—É—Ç—ã–ª–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è
      container.dataset.closed = '1';
      container.classList.remove('breaking', 'bottle-visible', 'bottle-hiding');
    }, 2500); // –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ + –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
  };

  // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  container.addEventListener('mouseenter', () => {
    if (container.dataset.closed === '1') {
      // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–º–µ–Ω—å –∑–∞–∫—Ä—ã—Ç—ã–º
      container.classList.remove('bottle-visible', 'bottle-hiding', 'breaking', 'collecting');
      return;
    }
    // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä —Å–±–æ—Ä–∞ –µ—Å–ª–∏ –º—ã—à—å –≤–µ—Ä–Ω—É–ª–∞—Å—å
    clearTimeout(container.collectTimer);
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –µ—Å–ª–∏ –±—É—Ç—ã–ª–∫–∞ –µ—â–µ –∏—Å—á–µ–∑–∞–µ—Ç
    container.classList.remove('bottle-hiding');
    // –ï—Å–ª–∏ —à–ª–∞ –∞–Ω–∏–º–∞—Ü–∏—è —Å–±–æ—Ä–∞ ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—É—Å–æ—á–∫–æ–≤
    if (container.classList.contains('collecting')) {
      container.classList.remove('collecting');
      pieces.forEach(p => {
        p.style.animation = 'none';
        // force reflow –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        void p.offsetWidth;
        p.style.animation = '';
        // —Å–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π —Å–º–µ—â–µ–Ω–∏—è
        p.style.setProperty('--explode-x', '0px');
        p.style.setProperty('--explode-y', '0px');
        p.style.setProperty('--rotation', '0deg');
        p.style.opacity = '1';
      });
    }
    
    // –ï—Å–ª–∏ –±—É—Ç—ã–ª–∫–∞ –±—ã–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è, –ø–ª–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
    if (container.classList.contains('bottle-visible')) {
      // –ë—É—Ç—ã–ª–∫–∞ —É–∂–µ –≤–∏–¥–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    } else {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞–∑–ª–µ—Ç–∞
      triggerExplode();
    }
  });
  container.addEventListener('mouseleave', () => {
    if (container.dataset.closed === '1') {
      container.classList.remove('bottle-visible', 'bottle-hiding', 'breaking', 'collecting');
      return;
    }
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –±—É—Ç—ã–ª–∫–∏
    container.classList.remove('bottle-visible');
    container.classList.add('bottle-hiding');
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      container.classList.remove('bottle-hiding');
    }, 2000);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å–±–æ—Ä–∞ (—á–µ—Ä–µ–∑ 7 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –±—É—Ç—ã–ª–∫–µ –∏—Å—á–µ–∑–Ω—É—Ç—å)
    container.collectTimer = setTimeout(() => {
      console.log('Timer fired, checking conditions...');
      console.log('breaking class:', container.classList.contains('breaking'));
      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å breaking –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–æ–º
      container.classList.remove('breaking');
      console.log('Starting collect animation...');
      collectPieces();
    }, 2000);
  });
  container.addEventListener('touchstart', () => { if (container.dataset.closed !== '1') triggerExplode(); });
  container.addEventListener('touchend', () => {
    if (container.dataset.closed === '1') {
      container.classList.remove('bottle-visible', 'bottle-hiding', 'breaking', 'collecting');
      return;
    }
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –±—É—Ç—ã–ª–∫–∏
    container.classList.remove('bottle-visible');
    container.classList.add('bottle-hiding');
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      container.classList.remove('bottle-hiding');
    }, 2000);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å–±–æ—Ä–∞ (—á–µ—Ä–µ–∑ 7 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –±—É—Ç—ã–ª–∫–µ –∏—Å—á–µ–∑–Ω—É—Ç—å)
    container.collectTimer = setTimeout(() => {
      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å breaking –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–æ–º
      container.classList.remove('breaking');
      collectPieces();
    }, 5000);
  });
});


